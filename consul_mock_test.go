// Code generated by MockGen. DO NOT EDIT.
// Source: resolver.go

// Package consul is a generated GoMock package.
package consul

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/hashicorp/consul/api"
)

// MockConsul is a mock of consul interface.
type MockConsul struct {
	ctrl     *gomock.Controller
	recorder *MockConsulMockRecorder
}

// MockConsulMockRecorder is the mock recorder for MockConsul.
type MockConsulMockRecorder struct {
	mock *MockConsul
}

// NewMockConsul creates a new mock instance.
func NewMockConsul(ctrl *gomock.Controller) *MockConsul {
	mock := &MockConsul{ctrl: ctrl}
	mock.recorder = &MockConsulMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConsul) EXPECT() *MockConsulMockRecorder {
	return m.recorder
}

// ServiceMultipleTags mocks base method.
func (m *MockConsul) ServiceMultipleTags(service string, tags []string, passingOnly bool, q *api.QueryOptions) ([]*api.ServiceEntry, *api.QueryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceMultipleTags", service, tags, passingOnly, q)
	ret0, _ := ret[0].([]*api.ServiceEntry)
	ret1, _ := ret[1].(*api.QueryMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServiceMultipleTags indicates an expected call of ServiceMultipleTags.
func (mr *MockConsulMockRecorder) ServiceMultipleTags(service, tags, passingOnly, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceMultipleTags", reflect.TypeOf((*MockConsul)(nil).ServiceMultipleTags), service, tags, passingOnly, q)
}
