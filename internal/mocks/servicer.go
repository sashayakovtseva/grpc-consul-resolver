// Code generated by MockGen. DO NOT EDIT.
// Source: consul.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	api "github.com/hashicorp/consul/api"
)

// Mockservicer is a mock of servicer interface.
type Mockservicer struct {
	ctrl     *gomock.Controller
	recorder *MockservicerMockRecorder
}

// MockservicerMockRecorder is the mock recorder for Mockservicer.
type MockservicerMockRecorder struct {
	mock *Mockservicer
}

// NewMockservicer creates a new mock instance.
func NewMockservicer(ctrl *gomock.Controller) *Mockservicer {
	mock := &Mockservicer{ctrl: ctrl}
	mock.recorder = &MockservicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockservicer) EXPECT() *MockservicerMockRecorder {
	return m.recorder
}

// ServiceMultipleTags mocks base method.
func (m *Mockservicer) ServiceMultipleTags(service string, tags []string, passingOnly bool, q *api.QueryOptions) ([]*api.ServiceEntry, *api.QueryMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceMultipleTags", service, tags, passingOnly, q)
	ret0, _ := ret[0].([]*api.ServiceEntry)
	ret1, _ := ret[1].(*api.QueryMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ServiceMultipleTags indicates an expected call of ServiceMultipleTags.
func (mr *MockservicerMockRecorder) ServiceMultipleTags(service, tags, passingOnly, q interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceMultipleTags", reflect.TypeOf((*Mockservicer)(nil).ServiceMultipleTags), service, tags, passingOnly, q)
}
